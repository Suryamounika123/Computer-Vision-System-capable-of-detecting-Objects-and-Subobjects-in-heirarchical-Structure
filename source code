import cv2
import torch
import numpy as np
import json
from torchvision.models.detection import fasterrcnn_resnet50_fpn, FasterRCNN_ResNet50_FPN_Weights
from torchvision.transforms import functional as F

# Load a pre-trained Faster R-CNN model with the correct weights parameter
weights = FasterRCNN_ResNet50_FPN_Weights.COCO_V1
model = fasterrcnn_resnet50_fpn(weights=weights)
model.eval()  # Set the model to evaluation mode

# Define the COCO classes
COCO_INSTANCE_CATEGORY_NAMES = [
    '__background__', 'person', 'bicycle', 'car', 'motorcycle', 'airplane',
    'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant',
    'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse',
    'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack',
    'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard',
    'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard',
    'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork',
    'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange',
    'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair',
    'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'TV',
    'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave',
    'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase',
    'scissors', 'teddy bear', 'hair drier', 'toothbrush'
]

class ObjectDetector:
    def __init__(self, model):
        self.model = model
        self.object_id_counter = 0
        self.detected_objects = []

    def detect_objects(self, frame):
        # Convert the frame to a tensor
        frame_tensor = F.to_tensor(frame).unsqueeze(0)  # Add batch dimension
        with torch.no_grad():
            predictions = self.model(frame_tensor)

        # Process predictions
        self.process_predictions(predictions)

    def process_predictions(self, predictions):
        for i in range(len(predictions[0]['boxes'])):
            box = predictions[0]['boxes'][i].numpy()
            score = predictions[0]['scores'][i].item()
            label = predictions[0]['labels'][i].item()

            if score > 0.5:  # Confidence threshold
                self.object_id_counter += 1
                self.detected_objects.append({
                    "object_id": self.object_id_counter,
                    "label": COCO_INSTANCE_CATEGORY_NAMES[label],
                    "score": score,
                    "box": box.tolist()
                })

    def get_detected_objects(self):
        return self.detected_objects

# Example usage
if __name__ == "__main__":
    # Initialize the object detector
    detector = ObjectDetector(model)

    # Read an image
    image_path = r"C:\Users\Surya Mounika\Desktop\pytorch\07-final-app-facial-recognition.jpg"
    image = cv2.imread(image_path)

    # Check if the image was loaded correctly
    if image is None:
        print(f"Error: Could not read image from {image_path}")
    else:
        # Detect objects in the image
        detector.detect_objects(image)

        # Get detected objects
        detected_objects = detector.get_detected_objects()
        print(json.dumps(detected_objects, indent=4))
